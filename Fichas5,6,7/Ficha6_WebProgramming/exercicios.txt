1- tags used
    - text
    - form
    - textfield
    - submit

Tags descrita em : https://struts.apache.org/tag-developers/tag-reference.html
Tags descrita pelo uso do prefixo 's' descrito por :
    <%@ taglib prefix="s" uri="/struts-tags"%> 
        Exemplo: 	<s:text name="Prime numbers needed?" />

2-
    Model - Beans - primesBean.java (purest java ever)
    View  - JSP - index.jsp
    Controller - Dispatcher filter
                 Interceptors 
                 Actions  - PrimesAction

What is done: Web browser faz requests ao Controller. Este prepara toda a informação necessária com o Model e depois de escolher a view para tratar da request, a view vai buscar as informações que precisa ao Model já previamente com a informação.

3 - File struts.xml

    	<default-action-ref name="index" />
            Aqui fica marcado que a default action tem como nome "index".
        
        <action name="index">
            <result>/index.jsp</result>
        </action>
        Com isto é marcado caso a action tenha o nome index, a view page que irá apresentar informação ao browser client através de response é o inxex.jsp

        Outros actions funcionam assim também.

        No file index.jsp
            é apresentando o html ao user, quando ele clica no botão o form é submited e é chamada a action "primes" e nele o método post
        
        o struts.xml indica que depois é executado class="primes.action.PrimesAction" o metodo execute dando sucess chamando depois a view primes.jsp
            com isso é escolhido a view primes.jsp que vai fazer os gets
        

4 - Feito, e quando o user engana-se na password vai para uma pagina nova crida por mim

5 - se desligar o rmi e não fazer reset ao server ele apenas irá sempre para o else quando tenta fazer match das passwords
    se fizer o reset já vai dizer que não encontra a função dos match password.

6 - para ter acesso se user tem sessão iniciada

7 - incompleto







            
